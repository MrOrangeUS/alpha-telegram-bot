import requests
import openai
import os

COINGECKO_URL = "https://api.coingecko.com/api/v3/simple/price"
TRENDING_URL = "https://api.coingecko.com/api/v3/search/trending"
MEME_COINS = [
    "pepe", "dogecoin", "floki", "bonk", "wojak", "dogwifhat", "shiba-inu", "baby-doge-coin"
]

def fetch_memecoin_prices(vs_currency="usd"):
    params = {
        "ids": ",".join(MEME_COINS),
        "vs_currencies": vs_currency,
        "include_24hr_change": "true"
    }
    resp = requests.get(COINGECKO_URL, params=params)
    data = resp.json()
    result = {}
    for coin in MEME_COINS:
        if coin in data:
            result[coin] = {
                "price": data[coin][vs_currency],
                "change": data[coin].get(f"{vs_currency}_24h_change", 0)
            }
    return result

def top_meme_breakouts(prices, min_percent_change=10):
    movers = []
    for coin, d in prices.items():
        if abs(d["change"]) >= min_percent_change:
            movers.append((coin, d))
    movers.sort(key=lambda x: abs(x[1]["change"]), reverse=True)
    return movers

def fetch_trending_coins():
    try:
        resp = requests.get(TRENDING_URL, timeout=10)
        data = resp.json()
        trending = [item['item']['id'] for item in data.get("coins", [])]
        return trending
    except Exception as e:
        print("Trending fetch error:", e)
        return []

def ask_gpt_memecoin_breakout(breakouts, trending, openai_api_key):
    openai.api_key = openai_api_key
    if not breakouts and not trending:
        return "Nova Stratos: No meme coin breakouts or social momentum above threshold right now. Staying patient for better setups."
    coins_info = "\n".join(
        [f"{coin.upper()}: ${info['price']:.6f} ({info['change']:+.2f}% 24h)" for coin, info in breakouts]
    ) or "No major price breakouts, but some coins are trending."
    trending_list = ", ".join([t.upper() for t in trending if t in MEME_COINS]) or "No top meme coins are trending right now."
    prompt = f"""Act as Nova Stratos, an AI quant and meme coin momentum hunter. Detect meme coin breakouts using price and social trending.

Breakout Coins:
{coins_info}

Trending Meme Coins on social (CoinGecko):
{trending_list}

For each, say:
- Bullish or Bearish?
- Entry zone and Nova's risk tip
- If trending, add Nova's sentiment analysis
Wrap up with Nova's confidence score (1-10) for catching meme waves today.

Sign off with: "Generated by Nova Stratos."
"""
    response = openai.chat.completions.create(
    model="gpt-4",
    messages=[{"role": "user", "content": prompt}]
)
    return response.choices[0].message.content

# === Telegram integration for /memesnipe ===
def nova_memesnipe(openai_api_key):
    prices = fetch_memecoin_prices()
    movers = top_meme_breakouts(prices, min_percent_change=10)
    trending = fetch_trending_coins()
    return ask_gpt_memecoin_breakout(movers, trending, openai_api_key)

# === Example use for testing ===
if __name__ == "__main__":
    from dotenv import load_dotenv
    load_dotenv()
    OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
    print(nova_memesnipe(OPENAI_API_KEY))
