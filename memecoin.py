import requests
import openai
import os

COINGECKO_URL = "https://api.coingecko.com/api/v3/simple/price"
MEME_COINS = [
    "pepe", "dogecoin", "floki", "bonk", "wojak", "dogwifhat", "shiba-inu", "baby-doge-coin"
]

def fetch_memecoin_prices(vs_currency="usd"):
    params = {
        "ids": ",".join(MEME_COINS),
        "vs_currencies": vs_currency,
        "include_24hr_change": "true"
    }
    resp = requests.get(COINGECKO_URL, params=params)
    data = resp.json()
    result = {}
    for coin in MEME_COINS:
        if coin in data:
            result[coin] = {
                "price": data[coin][vs_currency],
                "change": data[coin].get(f"{vs_currency}_24h_change", 0)
            }
    return result

def top_meme_breakouts(prices, min_percent_change=10):
    # Return coins with >=10% move in last 24h (customize threshold)
    movers = []
    for coin, d in prices.items():
        if abs(d["change"]) >= min_percent_change:
            movers.append((coin, d))
    # Sort biggest movers first
    movers.sort(key=lambda x: abs(x[1]["change"]), reverse=True)
    return movers

def ask_gpt_memecoin_breakout(breakouts, openai_api_key):
    openai.api_key = openai_api_key
    if not breakouts:
        return "Nova Stratos: No meme coin breakouts above threshold right now. Staying patient for better risk/reward."
    coins_info = "\n".join(
        [f"{coin.upper()}: ${info['price']:.6f} ({info['change']:+.2f}% 24h)" for coin, info in breakouts]
    )
    prompt = f"""Act as Nova Stratos, an AI quant analyst specializing in crypto momentum and viral meme coin trends. 
You detect the most explosive meme coin breakouts using real-time price action and social volume.

Here are the meme coins with strong 24h breakouts:
{coins_info}

For each, quickly give:
- Bullish or Bearish?
- Entry and risk zone (tight stop)
- Nova's momentum play tip
Wrap up with Nova's confidence score for today's meme market.

End with: "Generated by Nova Stratos."
"""
    response = openai.ChatCompletion.create(
        model="gpt-4",
        messages=[{"role": "user", "content": prompt}]
    )
    return response.choices[0].message['content']

# === Example use ===
if __name__ == "__main__":
    from dotenv import load_dotenv
    load_dotenv()
    OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
    prices = fetch_memecoin_prices()
    movers = top_meme_breakouts(prices, min_percent_change=10)
    report = ask_gpt_memecoin_breakout(movers, OPENAI_API_KEY)
    print(report)
